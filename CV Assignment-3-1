import cv2
import numpy as np
import matplotlib.pyplot as plt

def compute_optical_flow(prev_frame, next_frame):
    # Convert frames to grayscale
    prev_gray = cv2.cvtColor(prev_frame, cv2.COLOR_BGR2GRAY)
    next_gray = cv2.cvtColor(next_frame, cv2.COLOR_BGR2GRAY)

    # Compute optical flow using Farneback method
    flow = cv2.calcOpticalFlowFarneback(prev_gray, next_gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)

    return flow

def display_frames_with_optical_flow(video_path):
    cap = cv2.VideoCapture(video_path)

    # Read the first frame
    ret, prev_frame = cap.read()

    while True:
        # Read the next frame
        ret, next_frame = cap.read()
        if not ret:
            break

        # Compute optical flow
        flow = compute_optical_flow(prev_frame, next_frame)

        # Display frames and optical flow in subplots
        plt.subplot(121), plt.imshow(cv2.cvtColor(prev_frame, cv2.COLOR_BGR2RGB))
        plt.title('Previous Frame'), plt.xticks([]), plt.yticks([])

        plt.subplot(122), plt.imshow(flow_to_color(flow))
        plt.title('Optical Flow'), plt.xticks([]), plt.yticks([])

        plt.show()

        # Update the previous frame
        prev_frame = next_frame

        # Break the loop if 'q' is pressed
        if cv2.waitKey(25) & 0xFF == ord('q'):
            break

    # Release video capture object
    cap.release()
    cv2.destroyAllWindows()

def flow_to_color(flow):
    h, w = flow.shape[:2]
    hsv = np.zeros((h, w, 3), dtype=np.uint8)

    mag, ang = cv2.cartToPolar(flow[..., 0], flow[..., 1])
    hsv[..., 0] = ang * 180 / np.pi / 2
    hsv[..., 1] = 255
    hsv[..., 2] = cv2.normalize(mag, None, 0, 255, cv2.NORM_MINMAX)

    return cv2.cvtColor(hsv, cv2.COLOR_HSV2RGB)

if __name__ == "__main__":
    video_path = "v_BabyCrawling_g01_c02.avi"  # Change this to the path of your video file
    display_frames_with_optical_flow(video_path)
